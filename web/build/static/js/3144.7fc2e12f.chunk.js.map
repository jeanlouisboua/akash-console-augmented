{"version":3,"file":"static/js/3144.7fc2e12f.chunk.js","mappings":"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","sources":["_helpers/my-deployment-utils.ts","Landing-Metadata/landing.ts","components/TileCard/TileCard.tsx","pages/Landing.tsx"],"sourcesContent":["export const myDeploymentFormat = async (result: any, value: any) => {\n  const key = String(result?.deploymentId?.dseq);\n  let image = 'n/a';\n  let cpu: any = 'n/a';\n  let memory = 'n/a';\n  let storage = 'n/a';\n  let count = 0;\n  if (value?.sdl?.services) {\n    for (const [key] of Object.entries(value.sdl.services)) {\n      if (count === 0) {\n        if (value.sdl.services[key] && value.sdl.services[key].image) {\n          image = value.sdl.services[key].image;\n        }\n        if (value.sdl.profiles.compute[key] && value.sdl.profiles.compute[key].resources) {\n          const resources = value.sdl.profiles.compute[key].resources;\n          cpu = resources.cpu.units;\n          memory = resources.memory.size;\n          storage = resources.storage.size;\n        }\n      }\n      count++;\n    }\n  }\n  return {\n    key,\n    data: {\n      dseq: key,\n      name: value.appName,\n      image,\n      cpu,\n      memory,\n      storage,\n      sdl: value.sdl,\n    },\n  };\n};\n","import img1 from './landingIcons/first_img.png';\nimport img2 from './landingIcons/www.png';\nimport img3 from './landingIcons/chip.png';\nimport img33 from './landingIcons/code.png';\nimport img4 from './landingIcons/last_guide.png';\nimport img5 from './landingIcons/sdl_2.png';\nimport img6 from './landingIcons/sdl_22.png';\n\ninterface Tile {\n  title: string;\n  description: string;\n  image: string;\n  buttonText: string;\n  route: string;\n  icon: string;\n  buttonEnabled: boolean;\n  buttonClass?: string;\n}\n\ninterface CategoryTiles {\n  introText: string;\n  tiles: Tile[];\n}\n\ninterface Metadata {\n  version: string;\n  categoriesTiles: CategoryTiles;\n  sdlGuideTiles: {\n    introText: string;\n    introDescription: string;\n    tiles: {\n      step: string;\n      text: string;\n      image: string;\n    }[];\n  };\n}\n\nexport const metadata: Metadata = {\n  version: '0.0.1',\n  categoriesTiles: {\n    introText: 'What would you like to do today?',\n    tiles: [\n      {\n        title: 'Deploy a Blockchain Node',\n        description:\n          'Easy and low cost hosting for your blockchain nodes (RPC servers, Validators and more)',\n        buttonText: 'Choose a Template',\n        route: '/landing/node-deployment',\n        icon: 'xrayView',\n        image: img1,\n        buttonEnabled: true,\n      },\n      {\n        title: 'Host a Website or Web Service',\n        description:\n          'Low cost, decentralized equivalents of the services provided by mainstream cloud providers. Host websites, blogsites, databases and more.',\n        buttonText: 'Choose a Template',\n        route: '/landing/web-deployment',\n        icon: 'www',\n        image: img2,\n        buttonEnabled: true,\n        buttonClass: 'coming-soon-btn-2',\n      },\n      {\n        title: 'Deploy an AI/ML Model',\n        description:\n          'Popular AI & ML models, deployed in just a few clicks. Includes Stable Diffusion, Falcon, Alpaca, and more.',\n        buttonText: 'Choose a Template',\n        route: '/landing/ml-deployment',\n        icon: 'electronicsChip',\n        image: img3,\n        buttonEnabled: true,\n      },\n      {\n        title: 'Custom Application',\n        description:\n          'Define your unique deployment requirements and preferences with SDL and deploy with ease on the flexible and reliable Akash network.',\n        buttonText: 'Import SDL',\n        route: '',\n        icon: 'electronicsChip',\n        image: img33,\n        buttonEnabled: true,\n      },\n    ],\n  },\n  sdlGuideTiles: {\n    introText: 'How does it work?',\n    introDescription:\n      'Deploy on Akash in 3 easy steps. For more information, check out this <a target=\"_blank\" href=\"https://docs.akash.network/guides/deploy\">help page</a>.',\n    tiles: [\n      {\n        step: '01',\n        text: 'Start with a template or your own custom application (SDL)',\n        image: img6,\n      },\n      {\n        step: '02',\n        text: 'Choose a provider based on your preferences and desired price',\n        image: img5,\n      },\n      {\n        step: '03',\n        text: 'View & manage your deployed application',\n        image: img4,\n      },\n    ],\n  },\n};\n","/* eslint-disable quotes */\nimport React, { Suspense, useState, useCallback } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { SdlEditor } from '../../components/SdlConfiguration/SdllEditor';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { Box, Button, Card, CardActions, CardContent, Typography } from '@mui/material';\nimport styled from '@emotion/styled';\nimport { Formik } from 'formik';\nimport {\n  deploymentDataStale,\n  deploymentSdl,\n  keplrState,\n  myDeployments as myDeploymentsAtom,\n} from '../../recoil/atoms';\ninterface Props {\n  item: {\n    route: string;\n    title: string;\n    image: string;\n    description: string;\n    buttonText: string;\n    buttonClass?: string;\n  };\n}\n\nimport { initialValues, InitialValuesProps, SDLSpec } from '../SdlConfiguration/settings';\nimport { myDeploymentFormat } from '../../_helpers/my-deployment-utils';\nimport { Deployment } from '@akashnetwork/akashjs/build/protobuf/akash/deployment/v1beta2/deployment';\nimport { useMutation } from 'react-query';\nimport { createDeployment, createLease, sendManifest } from '../../api/mutations';\n\nconst steps = ['Featured Apps', 'Select', 'Configure', 'Review', 'Deploy'];\n\nexport interface DeploymentStepperProps {\n  dseq?: string;\n  leaseId?: string;\n}\n\nfunction TileCard(props: Props) {\n  const { title, image, description, buttonText, buttonClass } = props.item;\n  const keplr = useRecoilValue(keplrState);\n  const navigate = useNavigate();\n  const [deploymentId, setDeploymentId] = React.useState<{ owner: string; dseq: string }>();\n  const { dseq } = useParams();\n  const [sdl, setSdl] = useRecoilState(deploymentSdl);\n  const [cardMessage, setCardMessage] = useState('');\n  const [activeStep, setActiveStep] = useState({ currentCard: 0 });\n\n  const [open, setOpen] = React.useState(false);\n  const [errorTitle, setErrorTitle] = React.useState<string>();\n  const [errorMessage, setErrorMessage] = React.useState<string>();\n  const [myDeployments, setMyDeployments] = useRecoilState(myDeploymentsAtom);\n  const { mutate: mxCreateDeployment } = useMutation(createDeployment);\n\n  const handleTileActionClick = useCallback((route: string) => {\n    return () => navigate(route);\n  }, [navigate]);\n\n  React.useEffect(() => {\n    if (dseq) {\n      setDeploymentId({\n        owner: keplr.accounts[0].address,\n        dseq,\n      });\n      setActiveStep({ currentCard: 4 });\n      return;\n    }\n  }, [dseq, keplr]);\n\n  const handleSdlEditorSave = (sdl: any) => {\n    navigate('/new-deployment/custom-sdl', { state: { sdl: sdl } });\n  };\n\n  const handleDeployment = (key: string, deployment: any) => {\n    const newDeployments: { [key: string]: Deployment } = { ...myDeployments };\n    newDeployments[key] = deployment;\n    setMyDeployments(newDeployments);\n  };\n\n  const [reviewSdl, setReviewSdl] = useState(false);\n  const closeReviewModal = useCallback(() => setReviewSdl(false), []);\n\n  const handleImportSDL = () => {\n    setReviewSdl(true);\n  };\n\n  // TODO: this should be changed to use the logging system, and not throw\n  // additional exceptions.\n  const handleError = async (maybeError: unknown, method: string) => {\n    const error =\n      maybeError && Object.prototype.hasOwnProperty.call(maybeError, 'message')\n        ? (maybeError as Error)\n        : { message: 'Unknown error' };\n\n    let title = 'Error';\n    let message = 'An error occurred while sending your request.';\n    if (method === 'acceptBid') {\n      title = 'Error Select Provider';\n      message = 'An error occurred while selecting a provider.';\n    }\n    if (method === 'createDeployment') {\n      title = 'Error Create Deployment';\n      message = 'An error occurred while trying to deploy.';\n      if (error.message.includes('Query failed with (6)')) {\n        message = 'There was an RPC error. This may happen during upgrades to the Akash Network.';\n      }\n    }\n    setErrorTitle(title);\n    setErrorMessage(message);\n    setCardMessage('');\n    setOpen(true);\n    throw new Error(`${method}: ${error.message}`);\n  };\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={async (value: InitialValuesProps) => {\n        // the onSubmit method is called from the component PreflightCheck.\n        setCardMessage('Creating deployment');\n\n        try {\n          const result = mxCreateDeployment(\n            {wallet: keplr, sdl: value.sdl, depositor: value.depositor },\n            {\n              onSuccess: async (result) => {\n                if (result && result.deploymentId) {\n                  setDeploymentId(result.deploymentId);\n                  setSdl(value.sdl);\n\n                  // set deployment to localStorage object using Atom\n                  const _deployment = await myDeploymentFormat(result, value);\n                  handleDeployment(_deployment.key, JSON.stringify(_deployment.data));\n\n                  // set deployment to localStorage item by dseq (deprecate ?)\n                  localStorage.setItem(_deployment.key, JSON.stringify(_deployment.data));\n\n                  // head to the bid selection page\n                  navigate(`/configure-deployment/${result.deploymentId.dseq}`);\n                }\n              },\n            }\n          );\n        } catch (error) {\n          await handleError(error, 'createDeployment');\n        }\n      }}\n    >\n      {({ setFieldValue, values }) => (\n        <>\n          <div key={title} className=\"h-full\">\n            <div className=\"max-w-sm w-full h-full xl:h-[310px] lg:h-[300px] md:w-[310px] lg:w-[300px] xl:w-[330px]  bg-white border border-[#0000001A] rounded-lg\">\n              <div className=\"h-full p-5\">\n                <div className=\"flex flex-col h-full gap-4\">\n                  <div className=\"flex gap-4\">\n                    <img className=\"\" src={image} alt=\"\" />\n                    <p className=\"font-bold text-[18px] mt-3 leading-6\">{title}</p>\n                  </div>\n                  <p className=\" mt-[30px] text-[16px] leading-6  \">{description}</p>\n                  <div className=\"flex-grow\"></div>\n                  <div className=\"\">\n                    {buttonText === 'Import SDL' && (\n                      <TemplateBtn>\n                        <Button\n                          variant=\"outlined\"\n                          onClick={() => {\n                            setFieldValue('sdl', {});\n                            handleImportSDL();\n                            setReviewSdl(true);\n                          }}\n                        >\n                          {buttonText}\n                        </Button>\n                      </TemplateBtn>\n                    )}\n\n                    {buttonText === 'Choose a Template' && (\n                      <TemplateBtn>\n                        <Button variant=\"outlined\" onClick={handleTileActionClick(props.item.route)}>\n                          {buttonText}\n                        </Button>\n                      </TemplateBtn>\n                    )}\n\n                    {buttonText === 'Coming Soon' && (\n                      <TemplateBtn>\n                        <Button disabled variant=\"outlined\">\n                          {buttonText}\n                        </Button>\n                      </TemplateBtn>\n                    )}\n                  </div>\n\n                  <SdlEditor\n                    reviewSdl={reviewSdl}\n                    closeReviewModal={closeReviewModal}\n                    onSave={handleSdlEditorSave}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </Formik>\n  );\n}\n\nexport default TileCard;\n\nconst TemplateBtn = styled.div`\n      display: flex;\n      justify-content: center;\n      margin-top: 40px;\n      Button {\n        width: 100%;\n      padding: 8px, 16px, 8px, 16px;\n  }\n      `;\n","import React from 'react';\nimport { metadata } from '../Landing-Metadata/landing';\nimport TileCard from '../components/TileCard/TileCard';\n\nfunction Landing() {\n  const { introText, tiles } = metadata.categoriesTiles;\n  const {\n    introText: sdlGuideIntroText,\n    introDescription,\n    tiles: sdlGuideTiles,\n  } = metadata.sdlGuideTiles;\n\n  return (\n    <div className=\"flex items-center justify-center mx-auto\">\n      <div>\n        <div>\n          <p className=\"flex justify-start mt-8 text-2xl font-bold \">{introText}</p>\n          <hr className=\"text-[#e5e7eb] mb-5 mt-8\" />\n        </div>\n        <div className=\"grid items-center justify-between grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {tiles && tiles.map((tile, idx) => <TileCard key={`type-tile_${idx}`} item={tile} />)}\n        </div>\n        <hr className=\"text-[#e5e7eb] mb-5 mt-8\" />\n        <div className=\"w-full h-full p-6 bg-white border border-[#0000001A] rounded-lg mt-[72px]\">\n          <div className=\"block gap-5 lg:flex\">\n            <div>\n              <p className=\"text-2xl font-bold text-center md:text-left\">{sdlGuideIntroText}</p>\n              <p\n                className=\"text-center w-[250px] md:w-72 md:text-left text-base my-4 mb-5 md:mb-5\"\n                dangerouslySetInnerHTML={{ __html: introDescription }}\n              ></p>\n            </div>\n            <div className=\"grid items-center justify-between grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3\">\n              {sdlGuideTiles &&\n                sdlGuideTiles.map((tile, idx) => (\n                  <div key={`guide-tile_${idx}`}>\n                    <div>\n                      <img className=\"guide-img\" src={tile.image} alt={tile.step} />\n                      <p className=\"mt-4 text-base font-bold \">{tile.step}</p>\n                      <p className=\"mt-4 mb-8 text-base font-bold md:text-lg w-60 md:w-80\">\n                        {tile.text}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Landing;\n"],"names":["myDeploymentFormat","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","value","_result$deploymentId","_value$sdl","key","image","cpu","memory","storage","count","_i","_Object$entries","_Object$entries$_i","_key","resources","wrap","_context","prev","next","String","deploymentId","dseq","sdl","services","Object","entries","length","_slicedToArray","profiles","compute","units","size","abrupt","data","name","appName","stop","_x","_x2","apply","arguments","metadata","version","categoriesTiles","introText","tiles","title","description","buttonText","route","icon","buttonEnabled","buttonClass","sdlGuideTiles","introDescription","step","text","props","_props$item","item","keplr","useRecoilValue","keplrState","navigate","useNavigate","_React$useState","React","_React$useState2","setDeploymentId","useParams","_useRecoilState","useRecoilState","deploymentSdl","_useRecoilState2","setSdl","_useState","useState","_useState2","setCardMessage","_useState3","currentCard","_useState4","setActiveStep","_React$useState3","_React$useState4","setOpen","_React$useState5","_React$useState6","setErrorTitle","_React$useState7","_React$useState8","setErrorMessage","_useRecoilState3","myDeploymentsAtom","_useRecoilState4","myDeployments","setMyDeployments","mxCreateDeployment","useMutation","createDeployment","mutate","handleTileActionClick","useCallback","owner","accounts","address","handleSdlEditorSave","state","handleDeployment","deployment","newDeployments","_objectSpread","_useState5","_useState6","reviewSdl","setReviewSdl","closeReviewModal","handleError","maybeError","method","error","message","prototype","hasOwnProperty","call","includes","Error","concat","_jsx","Formik","enableReinitialize","initialValues","onSubmit","_ref2","_callee3","_context3","wallet","depositor","onSuccess","_onSuccess","_callee2","_deployment","_context2","sent","JSON","stringify","localStorage","setItem","_x4","t0","_x3","children","_ref3","setFieldValue","values","_Fragment","className","_jsxs","src","alt","TemplateBtn","Button","variant","onClick","disabled","SdlEditor","onSave","styled","div","_templateObject","_taggedTemplateLiteral","_metadata$categoriesT","_metadata$sdlGuideTil","sdlGuideIntroText","map","tile","idx","TileCard","dangerouslySetInnerHTML","__html"],"sourceRoot":""}