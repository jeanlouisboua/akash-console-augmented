{"version":3,"file":"static/js/790.e05caf6a.chunk.js","mappings":"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","sources":["components/UpdateDeployment/styling.tsx","pages/ReDeploy.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\n\nexport const Label = styled.label`\n  position: relative;\n  padding-left: 5px;\n`;\n\nexport const UpdateDeploymentAction = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst ButtonTemplate = css`\n  padding: 10px 32px;\n  gap: 8px;\n  color: #374151;\n  text-transform: capitalize;\n  background-color: #ffffff;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  border: 1px solid #d7d7d7;\n  border-radius: 6px;\n\n  &:hover {\n    border-color: #3d4148;\n  }\n`;\n\nexport const ReviewSdlButton = styled(Button)`\n  ${ButtonTemplate};\n  margin-right: 20px;\n  border-radius: 8px;\n  font-family: 'Satoshi-Medium', sans-serif;\n  font-size: 14px;\n  box-shadow: 0px 1px 2px 0px #0000000d;\n\n  &:hover {\n    background-color: #f4f5f8;\n  }\n`;\n\nexport const CancelButton = styled(ReviewSdlButton)`\n  margin-left: auto;\n`;\n\nexport const SaveButton = styled(Button)`\n  ${ButtonTemplate};\n  background-color: #e11d48;\n  color: white;\n  align-self: end;\n\n  &:hover {\n    background-color: #925562;\n  }\n\n  &:disabled {\n    color: white;\n    background-color: #7e7073;\n  }\n`;\n","import React, { useCallback, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport styled from '@emotion/styled';\nimport {\n  CancelButton,\n  SaveButton,\n  UpdateDeploymentAction,\n} from '../components/UpdateDeployment/styling';\nimport { useRecoilValue } from 'recoil';\nimport { keplrState } from '../recoil/atoms';\nimport { Button } from '@mui/material';\nimport { css } from '@emotion/react';\nimport { SdlConfiguration } from '../components/SdlConfiguration/SdlConfiguration';\nimport {\n  initialValues,\n  InitialValuesProps,\n  SdlConfigurationType,\n  SDLSpec,\n} from '../components/SdlConfiguration/settings';\nimport { isError } from '../_helpers/types';\nimport { createDeployment } from '../api/mutations';\nimport { useMutation } from 'react-query';\n\nconst ReDeploy: React.FC<any> = () => {\n  const navigate = useNavigate();\n  const { dseq } = useParams<any>();\n  const [reviewSdl, showSdlReview] = useState(false);\n  const closeReviewModal = useCallback(() => showSdlReview(false), []);\n  const [cardMessage, setCardMessage] = useState('');\n  const [appData, setAppData] = useState<{ name: string; sdl?: SDLSpec } | null>(null);\n  const {\n    mutate: mxCreateDeployment,\n    isLoading: progressVisible,\n    data: result,\n  } = useMutation(createDeployment);\n  const keplr = useRecoilValue(keplrState);\n\n  const appCache = dseq ? localStorage.getItem(dseq) : null;\n\n  const application = appCache ? (JSON.parse(appCache) as { name: string; sdl: SDLSpec }) : null;\n\n  const handleSubmit = async (values: InitialValuesProps) => {\n    setCardMessage('Creating deployment');\n    setAppData({ name: values.appName, sdl: values.sdl });\n    mxCreateDeployment({wallet: keplr, sdl: values.sdl });\n  };\n\n  const handleSave = (sdl: SDLSpec) => {\n    mxCreateDeployment({keplr, sdl } as any); // Trigger the deployment mutation\n  };\n\n  React.useEffect(() => {\n    if (progressVisible == false && result && result.deploymentId) {\n      navigate(`/configure-deployment/${result.deploymentId.dseq}`);\n      localStorage.setItem(`${result.deploymentId.dseq}`, JSON.stringify(appData));\n    }\n  }, [progressVisible, result, appData]);\n\n  if (application === null) {\n    return <></>;\n  }\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{ ...initialValues, appName: application.name, sdl: application.sdl }}\n      onSubmit={handleSubmit}\n    >\n      {({ values, submitForm }) => {\n        return (\n          <SdlConfiguration\n            sdl={values.sdl}\n            reviewSdl={reviewSdl}\n            closeReviewModal={closeReviewModal}\n            configurationType={SdlConfigurationType.ReDeploy}\n            progressVisible={progressVisible}\n            cardMessage={cardMessage}\n            onSave={handleSave}\n            actionItems={() => (\n              <UpdateDeploymentAction>\n                <ReviewSdlButton onClick={() => showSdlReview(true)}>Review SDL</ReviewSdlButton>\n                <CancelButton onClick={() => navigate(-1)}>Cancel</CancelButton>\n                <SaveButton onClick={() => submitForm()}>Deploy</SaveButton>\n              </UpdateDeploymentAction>\n            )}\n          />\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ReDeploy;\n\nconst ButtonTemplate = css`\n  padding: 10px 32px;\n  gap: 8px;\n  color: #374151;\n  text-transform: capitalize;\n  background-color: #ffffff;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  border: 1px solid #d7d7d7;\n  border-radius: 6px;\n\n  &:hover {\n    border-color: #3d4148;\n  }\n`;\n\nconst ReviewSdlButton = styled(Button)`\n  ${ButtonTemplate};\n  margin-right: 20px;\n  border-radius: 8px;\n  font-family: 'Satoshi-Medium', sans-serif;\n  font-size: 14px;\n  box-shadow: 0px 1px 2px 0px #0000000d;\n\n  &:hover {\n    background-color: #f4f5f8;\n  }\n`;\n"],"names":["UpdateDeploymentAction","styled","label","_templateObject","_taggedTemplateLiteral","div","_templateObject2","ButtonTemplate","css","_templateObject3","ReviewSdlButton","Button","_templateObject4","CancelButton","_templateObject5","SaveButton","_templateObject6","navigate","useNavigate","dseq","useParams","_useState","useState","_useState2","_slicedToArray","reviewSdl","showSdlReview","closeReviewModal","useCallback","_useState3","_useState4","cardMessage","setCardMessage","_useState5","_useState6","appData","setAppData","_useMutation","useMutation","createDeployment","mxCreateDeployment","mutate","progressVisible","isLoading","result","data","keplr","useRecoilValue","keplrState","appCache","localStorage","getItem","application","JSON","parse","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","name","appName","sdl","wallet","stop","_x","apply","arguments","handleSave","React","deploymentId","concat","setItem","stringify","_jsx","_Fragment","Formik","enableReinitialize","initialValues","_objectSpread","onSubmit","children","_ref2","submitForm","SdlConfiguration","configurationType","SdlConfigurationType","ReDeploy","onSave","actionItems","_jsxs","onClick"],"sourceRoot":""}