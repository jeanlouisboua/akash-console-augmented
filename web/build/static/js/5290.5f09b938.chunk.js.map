{"version":3,"file":"static/js/5290.5f09b938.chunk.js","mappings":"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","sources":["_helpers/types.ts","components/UpdateDeployment/styling.tsx","hooks/useAppCache.ts","pages/UpdateDeployment.tsx"],"sourcesContent":["export function isError(err: unknown): err is Error {\n  return (\n    err !== null && typeof err === 'object' && Object.prototype.hasOwnProperty.call(err, 'message')\n  );\n}\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\nimport { Button } from '@mui/material';\n\nexport const Label = styled.label`\n  position: relative;\n  padding-left: 5px;\n`;\n\nexport const UpdateDeploymentAction = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst ButtonTemplate = css`\n  padding: 10px 32px;\n  gap: 8px;\n  color: #374151;\n  text-transform: capitalize;\n  background-color: #ffffff;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  border: 1px solid #d7d7d7;\n  border-radius: 6px;\n\n  &:hover {\n    border-color: #3d4148;\n  }\n`;\n\nexport const ReviewSdlButton = styled(Button)`\n  ${ButtonTemplate};\n  margin-right: 20px;\n  border-radius: 8px;\n  font-family: 'Satoshi-Medium', sans-serif;\n  font-size: 14px;\n  box-shadow: 0px 1px 2px 0px #0000000d;\n\n  &:hover {\n    background-color: #f4f5f8;\n  }\n`;\n\nexport const CancelButton = styled(ReviewSdlButton)`\n  margin-left: auto;\n`;\n\nexport const SaveButton = styled(Button)`\n  ${ButtonTemplate};\n  background-color: #e11d48;\n  color: white;\n  align-self: end;\n\n  &:hover {\n    background-color: #925562;\n  }\n\n  &:disabled {\n    color: white;\n    background-color: #7e7073;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { SDLSpec } from '../components/SdlConfiguration/settings';\n\ntype Application = {\n  name: string;\n  sdl: SDLSpec;\n};\n\nfunction useAppCache(dseq: string | undefined) {\n  const [application, setApplication] = useState<Application | null>(null);\n\n  useEffect(() => {\n    const cachedValue = dseq ? localStorage.getItem(dseq) : null;\n\n    const app = cachedValue ? (JSON.parse(cachedValue) as Application) : null;\n\n    setApplication(app);\n  }, [dseq]);\n\n  return application;\n}\n\nexport default useAppCache;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport styled from '@emotion/styled';\nimport {\n  CancelButton,\n  SaveButton,\n  UpdateDeploymentAction,\n} from '../components/UpdateDeployment/styling';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { keplrState } from '../recoil/atoms';\nimport { Button } from '@mui/material';\nimport { css } from '@emotion/react';\nimport { SdlConfiguration } from '../components/SdlConfiguration/SdlConfiguration';\nimport {\n  initialValues,\n  InitialValuesProps,\n  SdlConfigurationType,\n  SDLSpec,\n} from '../components/SdlConfiguration/settings';\nimport logging from '../logging';\nimport { ManifestVersion } from '../_helpers/deployments-utils';\nimport useAppCache from '../hooks/useAppCache';\nimport { isError } from '../_helpers/types';\nimport { getRpcNode } from '../hooks/useRpcNode';\nimport { deploymentInfo, queryLease } from '../api/queries';\nimport { useMutation, useQuery } from 'react-query';\nimport { sendManifest, updateDeployment } from '../api/mutations';\n\nconst UpdateDeployment: React.FC<any> = () => {\n  const navigate = useNavigate();\n  const { dseq } = useParams<{ dseq: string }>();\n //const keplr = useRecoilValue(keplrState);\n  const [keplr, setKeplr] = useRecoilState(keplrState);\n  const [reviewSdl, showSdlReview] = useState(false);\n  const closeReviewModal = useCallback(() => showSdlReview(false), []);\n  const application = useAppCache(dseq);\n  const [cardMessage, setCardMessage] = useState('');\n  const { networkType } = getRpcNode();\n\n  const deploymentId = {\n    owner: keplr.accounts[0].address,\n    dseq: dseq || '0',\n  };\n  const { data: deploymentResponse } = useQuery(['deployment', deploymentId], deploymentInfo);\n\n  const leaseId = {\n    owner: keplr.accounts[0].address,\n    dseq: dseq || '0',\n  };\n  const { data: leaseResponse } = useQuery(['lease', leaseId], queryLease);\n\n  // mutations\n  const { mutate: mxSendManifest, isLoading: isSendingManifest } = useMutation(sendManifest);\n  const { mutate: mxUpdateDeployment, isLoading: isUpdatingDeployment } =\n    useMutation(updateDeployment);\n\n  const deployment = deploymentResponse?.deployment?.deployment;\n  const lease = leaseResponse?.leases.length ? leaseResponse.leases[0].lease : undefined;\n\n  const progressVisible = isSendingManifest || isUpdatingDeployment;\n\n  const rpcVersion = networkType === 'testnet' ? 'beta3' : 'beta2';\n\n  if (application === null) {\n    return <>Invalid DSEQ</>;\n  }\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={{\n        ...initialValues,\n        appName: application.name,\n        sdl: application.sdl as SDLSpec,\n      }}\n      onSubmit={async (value: InitialValuesProps) => {\n        setCardMessage('Updating deployment');\n        let image = 'n/a';\n        let cpu: any = 'n/a';\n        let memory = 'n/a';\n        let storage = 'n/a';\n        let count = 0;\n\n        if (!value.sdl) {\n          console.log('Update deployment called with invalid SDL');\n          return;\n        }\n\n        const manifestVersion = await ManifestVersion(value.sdl, rpcVersion);\n        const newVersion = Buffer.from(manifestVersion).toString('base64');\n        const oldVersion = Buffer.from((deployment as any)?.version).toString('base64');\n\n        if (!lease) {\n          return;\n        }\n\n        if (oldVersion === newVersion) {\n          mxSendManifest(\n            { address: keplr.accounts[0].address, lease, sdl: value.sdl },\n            {\n              onSuccess: () => {\n                logging.success('Manifest successfully updated');\n                navigate(-1);\n              },\n              onError: (error: any) => {\n                logging.log(`Failed to send manifest: ${error}`);\n              },\n            }\n          );\n\n          return;\n        }\n\n        try {\n          mxUpdateDeployment(\n            {\n              wallet: keplr,\n              deploymentId: {\n                owner: keplr.accounts[0].address,\n                dseq,\n              },\n              sdl: value.sdl,\n            },\n            {\n              onSuccess: (result: any) => {\n                if (result.deploymentId && value.sdl) {\n                  setCardMessage('Sending manifest');\n\n                  mxSendManifest(\n                    { address: keplr.accounts[0].address, lease, sdl: value.sdl },\n                    {\n                      onSuccess: () => {\n                        const sdl = value.sdl as SDLSpec;\n\n                        for (const [key] of Object.entries(sdl.services)) {\n                          if (count === 0) {\n                            if (sdl.services[key] && sdl.services[key].image) {\n                              image = sdl.services[key].image;\n                            }\n                            if (sdl.profiles.compute[key] && sdl.profiles.compute[key].resources) {\n                              const resources = sdl.profiles.compute[key].resources;\n                              cpu = resources.cpu.units;\n                              memory = resources.memory.size;\n                              storage = Array.isArray(resources.storage)\n                                ? resources.storage[0].size\n                                : resources.storage.size;\n                            }\n                          }\n                          count++;\n                        }\n                        localStorage.setItem(\n                          `${result.deploymentId.dseq}`,\n                          JSON.stringify({\n                            name: value.appName,\n                            image,\n                            cpu,\n                            memory,\n                            storage,\n                            sdl,\n                          })\n                        );\n                        navigate(-1);\n                      },\n                      onError: (error: any) => {\n                        logging.error('UpdateDeployment.tsx' + error.message);\n                      },\n                    }\n                  );\n                }\n                  //refresh balance\n          setKeplr({\n            accounts: keplr.accounts,\n            isSignedIn: true\n          });\n              },\n              onError: (error: any) => {\n                logging.error('UpdateDeployment.tsx' + error.message);\n              },\n            }\n          );\n        } catch (error) {\n          // TODO: Implement appropriate error handling\n          // Here we need to check it error.message is \"Request rejected\" which mean user clicked reject button\n          // or it could also happen that user didn't change anything and error is \"Query failed with (6): rpc error: code...\"\n          if (isError(error)) {\n            logging.error('UpdateDeployment.tsx' + error.message);\n          }\n          setCardMessage('');\n        }\n      }}\n    >\n      {({ values, submitForm }) => {\n        return (\n          <SdlConfiguration\n            sdl={values.sdl}\n            reviewSdl={reviewSdl}\n            closeReviewModal={closeReviewModal}\n            configurationType={SdlConfigurationType.Update}\n            progressVisible={progressVisible}\n            cardMessage={cardMessage}\n            onSave={submitForm} // Add the onSave prop\n            actionItems={() => (\n              <UpdateDeploymentAction>\n                <ReviewSdlButton onClick={() => showSdlReview(true)}>\n                  View Parameter Editor\n                </ReviewSdlButton>\n                <CancelButton onClick={() => navigate(-1)}>Cancel</CancelButton>\n                <SaveButton onClick={() => submitForm()}>Save</SaveButton>\n              </UpdateDeploymentAction>\n            )}\n          />\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default UpdateDeployment;\n\nconst ButtonTemplate = css`\n  padding: 10px 32px;\n  gap: 8px;\n  color: #374151;\n  text-transform: capitalize;\n  background-color: #ffffff;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n  border: 1px solid #d7d7d7;\n  border-radius: 6px;\n\n  &:hover {\n    border-color: #3d4148;\n  }\n`;\n\nconst ReviewSdlButton = styled(Button)`\n  ${ButtonTemplate};\n  margin-right: 20px;\n  border-radius: 8px;\n  font-family: 'Satoshi-Medium', sans-serif;\n  font-size: 14px;\n  box-shadow: 0px 1px 2px 0px #0000000d;\n\n  &:hover {\n    background-color: #f4f5f8;\n  }\n`;\n"],"names":["isError","err","Object","prototype","hasOwnProperty","call","UpdateDeploymentAction","styled","label","_templateObject","_taggedTemplateLiteral","div","_templateObject2","ButtonTemplate","css","_templateObject3","ReviewSdlButton","Button","_templateObject4","CancelButton","_templateObject5","SaveButton","_templateObject6","dseq","_useState","useState","_useState2","_slicedToArray","application","setApplication","useEffect","cachedValue","localStorage","getItem","app","JSON","parse","_deploymentResponse$d","navigate","useNavigate","useParams","_useRecoilState","useRecoilState","keplrState","_useRecoilState2","keplr","setKeplr","reviewSdl","showSdlReview","closeReviewModal","useCallback","useAppCache","_useState3","_useState4","cardMessage","setCardMessage","networkType","getRpcNode","deploymentId","owner","accounts","address","deploymentResponse","useQuery","deploymentInfo","data","leaseId","leaseResponse","queryLease","_useMutation","useMutation","sendManifest","mxSendManifest","mutate","isSendingManifest","isLoading","_useMutation2","updateDeployment","mxUpdateDeployment","isUpdatingDeployment","deployment","lease","leases","length","undefined","progressVisible","rpcVersion","_jsx","_Fragment","children","Formik","enableReinitialize","initialValues","_objectSpread","appName","name","sdl","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","value","image","cpu","memory","storage","count","manifestVersion","newVersion","oldVersion","wrap","_context","prev","next","console","log","abrupt","ManifestVersion","sent","Buffer","from","toString","version","onSuccess","logging","success","onError","error","concat","wallet","result","_i","_Object$entries","entries","services","key","profiles","compute","resources","units","size","Array","isArray","setItem","stringify","message","isSignedIn","stop","_x","apply","arguments","_ref2","values","submitForm","SdlConfiguration","configurationType","SdlConfigurationType","Update","onSave","actionItems","_jsxs","onClick"],"sourceRoot":""}