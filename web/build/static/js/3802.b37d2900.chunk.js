/*! For license information please see 3802.b37d2900.chunk.js.LICENSE.txt */
(self.webpackChunkweb=self.webpackChunkweb||[]).push([[3802],{44450:function(e,r,o){"use strict";o.d(r,{Z:function(){return b}});var s=o(30808),t=o(25773),n=o(56167),i=o(34337),a=o(30102),c=o(26804),p=o(6716),l=o(88867),u=o(96420),d=o(13327),g=o(20814);function m(e){return(0,g.Z)("MuiStep",e)}(0,d.Z)("MuiStep",["root","horizontal","vertical","alternativeLabel","completed"]);var T=o(37878),E=["active","children","className","component","completed","disabled","expanded","index","last"],h=(0,u.ZP)("div",{name:"MuiStep",slot:"Root",overridesResolver:function(e,r){var o=e.ownerState;return[r.root,r[o.orientation],o.alternativeLabel&&r.alternativeLabel,o.completed&&r.completed]}})((function(e){var r=e.ownerState;return(0,t.Z)({},"horizontal"===r.orientation&&{paddingLeft:8,paddingRight:8},r.alternativeLabel&&{flex:1,position:"relative"})})),b=n.forwardRef((function(e,r){var o=(0,l.Z)({props:e,name:"MuiStep"}),u=o.active,d=o.children,g=o.className,b=o.component,w=void 0===b?"div":b,_=o.completed,f=o.disabled,v=o.expanded,k=void 0!==v&&v,G=o.index,y=o.last,P=(0,s.Z)(o,E),S=n.useContext(c.Z),A=S.activeStep,R=S.connector,O=S.alternativeLabel,F=S.orientation,U=S.nonLinear,C=void 0!==u&&u,D=void 0!==_&&_,L=void 0!==f&&f;A===G?C=void 0===u||u:!U&&A>G?D=void 0===_||_:!U&&A<G&&(L=void 0===f||f);var Z=n.useMemo((function(){return{index:G,last:y,expanded:k,icon:G+1,active:C,completed:D,disabled:L}}),[G,y,k,C,D,L]),j=(0,t.Z)({},o,{active:C,orientation:F,alternativeLabel:O,completed:D,disabled:L,expanded:k,component:w}),q=function(e){var r=e.classes,o={root:["root",e.orientation,e.alternativeLabel&&"alternativeLabel",e.completed&&"completed"]};return(0,a.Z)(o,m,r)}(j),x=(0,T.jsxs)(h,(0,t.Z)({as:w,className:(0,i.Z)(q.root,g),ref:r,ownerState:j},P,{children:[R&&O&&0!==G?R:null,d]}));return(0,T.jsx)(p.Z.Provider,{value:Z,children:R&&!O&&0!==G?(0,T.jsxs)(n.Fragment,{children:[R,x]}):x})}))},6716:function(e,r,o){"use strict";var s=o(56167).createContext({});r.Z=s},46418:function(e,r,o){"use strict";o.d(r,{Z:function(){return L}});var s=o(64649),t=o(30808),n=o(25773),i=o(56167),a=o(34337),c=o(30102),p=o(96420),l=o(88867),u=o(55240),d=o(37878),g=(0,u.Z)((0,d.jsx)("path",{d:"M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"}),"CheckCircle"),m=(0,u.Z)((0,d.jsx)("path",{d:"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"}),"Warning"),T=o(1067),E=o(13327),h=o(20814);function b(e){return(0,h.Z)("MuiStepIcon",e)}var w,_=(0,E.Z)("MuiStepIcon",["root","active","completed","error","text"]),f=["active","className","completed","error","icon"],v=(0,p.ZP)(T.Z,{name:"MuiStepIcon",slot:"Root",overridesResolver:function(e,r){return r.root}})((function(e){var r,o=e.theme;return r={display:"block",transition:o.transitions.create("color",{duration:o.transitions.duration.shortest}),color:(o.vars||o).palette.text.disabled},(0,s.Z)(r,"&.".concat(_.completed),{color:(o.vars||o).palette.primary.main}),(0,s.Z)(r,"&.".concat(_.active),{color:(o.vars||o).palette.primary.main}),(0,s.Z)(r,"&.".concat(_.error),{color:(o.vars||o).palette.error.main}),r})),k=(0,p.ZP)("text",{name:"MuiStepIcon",slot:"Text",overridesResolver:function(e,r){return r.text}})((function(e){var r=e.theme;return{fill:(r.vars||r).palette.primary.contrastText,fontSize:r.typography.caption.fontSize,fontFamily:r.typography.fontFamily}})),G=i.forwardRef((function(e,r){var o=(0,l.Z)({props:e,name:"MuiStepIcon"}),s=o.active,i=void 0!==s&&s,p=o.className,u=o.completed,T=void 0!==u&&u,E=o.error,h=void 0!==E&&E,_=o.icon,G=(0,t.Z)(o,f),y=(0,n.Z)({},o,{active:i,completed:T,error:h}),P=function(e){var r=e.classes,o={root:["root",e.active&&"active",e.completed&&"completed",e.error&&"error"],text:["text"]};return(0,c.Z)(o,b,r)}(y);if("number"===typeof _||"string"===typeof _){var S=(0,a.Z)(p,P.root);return h?(0,d.jsx)(v,(0,n.Z)({as:m,className:S,ref:r,ownerState:y},G)):T?(0,d.jsx)(v,(0,n.Z)({as:g,className:S,ref:r,ownerState:y},G)):(0,d.jsxs)(v,(0,n.Z)({className:S,ref:r,ownerState:y},G,{children:[w||(w=(0,d.jsx)("circle",{cx:"12",cy:"12",r:"12"})),(0,d.jsx)(k,{className:P.text,x:"12",y:"12",textAnchor:"middle",dominantBaseline:"central",ownerState:y,children:_})]}))}return _})),y=o(26804),P=o(6716);function S(e){return(0,h.Z)("MuiStepLabel",e)}var A=(0,E.Z)("MuiStepLabel",["root","horizontal","vertical","label","active","completed","error","disabled","iconContainer","alternativeLabel","labelContainer"]),R=["children","className","componentsProps","error","icon","optional","slotProps","StepIconComponent","StepIconProps"],O=(0,p.ZP)("span",{name:"MuiStepLabel",slot:"Root",overridesResolver:function(e,r){var o=e.ownerState;return[r.root,r[o.orientation]]}})((function(e){var r,o=e.ownerState;return(0,n.Z)((r={display:"flex",alignItems:"center"},(0,s.Z)(r,"&.".concat(A.alternativeLabel),{flexDirection:"column"}),(0,s.Z)(r,"&.".concat(A.disabled),{cursor:"default"}),r),"vertical"===o.orientation&&{textAlign:"left",padding:"8px 0"})})),F=(0,p.ZP)("span",{name:"MuiStepLabel",slot:"Label",overridesResolver:function(e,r){return r.label}})((function(e){var r,o=e.theme;return(0,n.Z)({},o.typography.body2,(r={display:"block",transition:o.transitions.create("color",{duration:o.transitions.duration.shortest})},(0,s.Z)(r,"&.".concat(A.active),{color:(o.vars||o).palette.text.primary,fontWeight:500}),(0,s.Z)(r,"&.".concat(A.completed),{color:(o.vars||o).palette.text.primary,fontWeight:500}),(0,s.Z)(r,"&.".concat(A.alternativeLabel),{marginTop:16}),(0,s.Z)(r,"&.".concat(A.error),{color:(o.vars||o).palette.error.main}),r))})),U=(0,p.ZP)("span",{name:"MuiStepLabel",slot:"IconContainer",overridesResolver:function(e,r){return r.iconContainer}})((function(){return(0,s.Z)({flexShrink:0,display:"flex",paddingRight:8},"&.".concat(A.alternativeLabel),{paddingRight:0})})),C=(0,p.ZP)("span",{name:"MuiStepLabel",slot:"LabelContainer",overridesResolver:function(e,r){return r.labelContainer}})((function(e){var r=e.theme;return(0,s.Z)({width:"100%",color:(r.vars||r).palette.text.secondary},"&.".concat(A.alternativeLabel),{textAlign:"center"})})),D=i.forwardRef((function(e,r){var o,s=(0,l.Z)({props:e,name:"MuiStepLabel"}),p=s.children,u=s.className,g=s.componentsProps,m=void 0===g?{}:g,T=s.error,E=void 0!==T&&T,h=s.icon,b=s.optional,w=s.slotProps,_=void 0===w?{}:w,f=s.StepIconComponent,v=s.StepIconProps,k=(0,t.Z)(s,R),A=i.useContext(y.Z),D=A.alternativeLabel,L=A.orientation,Z=i.useContext(P.Z),j=Z.active,q=Z.disabled,x=Z.completed,I=Z.icon,W=h||I,H=f;W&&!H&&(H=G);var B=(0,n.Z)({},s,{active:j,alternativeLabel:D,completed:x,disabled:q,error:E,orientation:L}),M=function(e){var r=e.classes,o=e.orientation,s=e.active,t=e.completed,n=e.error,i=e.disabled,a=e.alternativeLabel,p={root:["root",o,n&&"error",i&&"disabled",a&&"alternativeLabel"],label:["label",s&&"active",t&&"completed",n&&"error",i&&"disabled",a&&"alternativeLabel"],iconContainer:["iconContainer",s&&"active",t&&"completed",n&&"error",i&&"disabled",a&&"alternativeLabel"],labelContainer:["labelContainer",a&&"alternativeLabel"]};return(0,c.Z)(p,S,r)}(B),z=null!=(o=_.label)?o:m.label;return(0,d.jsxs)(O,(0,n.Z)({className:(0,a.Z)(M.root,u),ref:r,ownerState:B},k,{children:[W||H?(0,d.jsx)(U,{className:M.iconContainer,ownerState:B,children:(0,d.jsx)(H,(0,n.Z)({completed:x,active:j,error:E,icon:W},v))}):null,(0,d.jsxs)(C,{className:M.labelContainer,ownerState:B,children:[p?(0,d.jsx)(F,(0,n.Z)({ownerState:B},z,{className:(0,a.Z)(M.label,null==z?void 0:z.className),children:p})):null,b]})]}))}));D.muiName="StepLabel";var L=D},55082:function(e,r,o){"use strict";o.d(r,{Z:function(){return y}});var s=o(30808),t=o(25773),n=o(56167),i=o(34337),a=o(30102),c=o(88867),p=o(96420),l=o(13327),u=o(20814);function d(e){return(0,u.Z)("MuiStepper",e)}(0,l.Z)("MuiStepper",["root","horizontal","vertical","alternativeLabel"]);var g=o(95570),m=o(26804),T=o(6716);function E(e){return(0,u.Z)("MuiStepConnector",e)}(0,l.Z)("MuiStepConnector",["root","horizontal","vertical","alternativeLabel","active","completed","disabled","line","lineHorizontal","lineVertical"]);var h=o(37878),b=["className"],w=(0,p.ZP)("div",{name:"MuiStepConnector",slot:"Root",overridesResolver:function(e,r){var o=e.ownerState;return[r.root,r[o.orientation],o.alternativeLabel&&r.alternativeLabel,o.completed&&r.completed]}})((function(e){var r=e.ownerState;return(0,t.Z)({flex:"1 1 auto"},"vertical"===r.orientation&&{marginLeft:12},r.alternativeLabel&&{position:"absolute",top:12,left:"calc(-50% + 20px)",right:"calc(50% + 20px)"})})),_=(0,p.ZP)("span",{name:"MuiStepConnector",slot:"Line",overridesResolver:function(e,r){var o=e.ownerState;return[r.line,r["line".concat((0,g.Z)(o.orientation))]]}})((function(e){var r=e.ownerState,o=e.theme,s="light"===o.palette.mode?o.palette.grey[400]:o.palette.grey[600];return(0,t.Z)({display:"block",borderColor:o.vars?o.vars.palette.StepConnector.border:s},"horizontal"===r.orientation&&{borderTopStyle:"solid",borderTopWidth:1},"vertical"===r.orientation&&{borderLeftStyle:"solid",borderLeftWidth:1,minHeight:24})})),f=n.forwardRef((function(e,r){var o=(0,c.Z)({props:e,name:"MuiStepConnector"}),p=o.className,l=(0,s.Z)(o,b),u=n.useContext(m.Z),d=u.alternativeLabel,f=u.orientation,v=void 0===f?"horizontal":f,k=n.useContext(T.Z),G=k.active,y=k.disabled,P=k.completed,S=(0,t.Z)({},o,{alternativeLabel:d,orientation:v,active:G,completed:P,disabled:y}),A=function(e){var r=e.classes,o=e.orientation,s={root:["root",o,e.alternativeLabel&&"alternativeLabel",e.active&&"active",e.completed&&"completed",e.disabled&&"disabled"],line:["line","line".concat((0,g.Z)(o))]};return(0,a.Z)(s,E,r)}(S);return(0,h.jsx)(w,(0,t.Z)({className:(0,i.Z)(A.root,p),ref:r,ownerState:S},l,{children:(0,h.jsx)(_,{className:A.line,ownerState:S})}))})),v=["activeStep","alternativeLabel","children","className","component","connector","nonLinear","orientation"],k=(0,p.ZP)("div",{name:"MuiStepper",slot:"Root",overridesResolver:function(e,r){var o=e.ownerState;return[r.root,r[o.orientation],o.alternativeLabel&&r.alternativeLabel]}})((function(e){var r=e.ownerState;return(0,t.Z)({display:"flex"},"horizontal"===r.orientation&&{flexDirection:"row",alignItems:"center"},"vertical"===r.orientation&&{flexDirection:"column"},r.alternativeLabel&&{alignItems:"flex-start"})})),G=(0,h.jsx)(f,{}),y=n.forwardRef((function(e,r){var o=(0,c.Z)({props:e,name:"MuiStepper"}),p=o.activeStep,l=void 0===p?0:p,u=o.alternativeLabel,g=void 0!==u&&u,T=o.children,E=o.className,b=o.component,w=void 0===b?"div":b,_=o.connector,f=void 0===_?G:_,y=o.nonLinear,P=void 0!==y&&y,S=o.orientation,A=void 0===S?"horizontal":S,R=(0,s.Z)(o,v),O=(0,t.Z)({},o,{alternativeLabel:g,orientation:A,component:w}),F=function(e){var r=e.orientation,o=e.alternativeLabel,s=e.classes,t={root:["root",r,o&&"alternativeLabel"]};return(0,a.Z)(t,d,s)}(O),U=n.Children.toArray(T).filter(Boolean),C=U.map((function(e,r){return n.cloneElement(e,(0,t.Z)({index:r,last:r+1===U.length},e.props))})),D=n.useMemo((function(){return{activeStep:l,alternativeLabel:g,connector:f,nonLinear:P,orientation:A}}),[l,g,f,P,A]);return(0,h.jsx)(m.Z.Provider,{value:D,children:(0,h.jsx)(k,(0,t.Z)({as:w,ownerState:O,className:(0,i.Z)(F.root,E),ref:r},R,{children:C}))})}))},26804:function(e,r,o){"use strict";var s=o(56167).createContext({});r.Z=s},59252:function(e,r,o){"use strict";o.d(r,{v:function(){return Me}});var s=o(99492),t=o(67591),n=o(94337),i=o(53782),a=o(11092),c=o(27791),p=o(22951),l=o(91976);function u(){return"object"===typeof navigator&&"userAgent"in navigator?navigator.userAgent:"object"===typeof process&&"version"in process?"Node.js/".concat(process.version.substr(1)," (").concat(process.platform,"; ").concat(process.arch,")"):"<environment undetectable>"}var d=o(72252),g=o(60726),m=o(50189),T=o(11026),E=o(64649);function h(e){return"[object Object]"===Object.prototype.toString.call(e)}function b(e){var r,o;return!1!==h(e)&&(void 0===(r=e.constructor)||!1!==h(o=r.prototype)&&!1!==o.hasOwnProperty("isPrototypeOf"))}function w(e,r){var o=Object.assign({},e);return Object.keys(r).forEach((function(s){b(r[s])&&s in e?o[s]=w(e[s],r[s]):Object.assign(o,(0,E.Z)({},s,r[s]))})),o}function _(e){for(var r in e)void 0===e[r]&&delete e[r];return e}function f(e,r,o){if("string"===typeof r){var s=r.split(" "),t=(0,T.Z)(s,2),n=t[0],i=t[1];o=Object.assign(i?{method:n,url:i}:{url:n},o)}else o=Object.assign({},r);var a;o.headers=(a=o.headers)?Object.keys(a).reduce((function(e,r){return e[r.toLowerCase()]=a[r],e}),{}):{},_(o),_(o.headers);var c=w(e||{},o);return e&&e.mediaType.previews.length&&(c.mediaType.previews=e.mediaType.previews.filter((function(e){return!c.mediaType.previews.includes(e)})).concat(c.mediaType.previews)),c.mediaType.previews=c.mediaType.previews.map((function(e){return e.replace(/-preview/,"")})),c}var v=/\{[^}]+\}/g;function k(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function G(e,r){return Object.keys(e).filter((function(e){return!r.includes(e)})).reduce((function(r,o){return r[o]=e[o],r}),{})}function y(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map((function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e})).join("")}function P(e){return encodeURIComponent(e).replace(/[!'()*]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function S(e,r,o){return r="+"===e||"#"===e?y(r):P(r),o?P(o)+"="+r:r}function A(e){return void 0!==e&&null!==e}function R(e){return";"===e||"&"===e||"?"===e}function O(e,r){var o=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,(function(e,s,t){if(s){var n="",i=[];if(-1!==o.indexOf(s.charAt(0))&&(n=s.charAt(0),s=s.substr(1)),s.split(/,/g).forEach((function(e){var o=/([^:\*]*)(?::(\d+)|(\*))?/.exec(e);i.push(function(e,r,o,s){var t=e[o],n=[];if(A(t)&&""!==t)if("string"===typeof t||"number"===typeof t||"boolean"===typeof t)t=t.toString(),s&&"*"!==s&&(t=t.substring(0,parseInt(s,10))),n.push(S(r,t,R(r)?o:""));else if("*"===s)Array.isArray(t)?t.filter(A).forEach((function(e){n.push(S(r,e,R(r)?o:""))})):Object.keys(t).forEach((function(e){A(t[e])&&n.push(S(r,t[e],e))}));else{var i=[];Array.isArray(t)?t.filter(A).forEach((function(e){i.push(S(r,e))})):Object.keys(t).forEach((function(e){A(t[e])&&(i.push(P(e)),i.push(S(r,t[e].toString())))})),R(r)?n.push(P(o)+"="+i.join(",")):0!==i.length&&n.push(i.join(","))}else";"===r?A(t)&&n.push(P(o)):""!==t||"&"!==r&&"?"!==r?""===t&&n.push(""):n.push(P(o)+"=");return n}(r,n,o[1],o[2]||o[3]))})),n&&"+"!==n){var a=",";return"?"===n?a="&":"#"!==n&&(a=n),(0!==i.length?n:"")+i.join(a)}return i.join(",")}return y(t)}))}function F(e){var r,o,s=e.method.toUpperCase(),t=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),n=Object.assign({},e.headers),i=G(e,["method","baseUrl","url","headers","request","mediaType"]),a=function(e){var r=e.match(v);return r?r.map(k).reduce((function(e,r){return e.concat(r)}),[]):[]}(t);t=(o=t,{expand:O.bind(null,o)}).expand(i),/^http/.test(t)||(t=e.baseUrl+t);var c=G(i,Object.keys(e).filter((function(e){return a.includes(e)})).concat("baseUrl"));if(!/application\/octet-stream/i.test(n.accept)&&(e.mediaType.format&&(n.accept=n.accept.split(/,/).map((function(r){return r.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,"application/vnd$1$2.".concat(e.mediaType.format))})).join(",")),e.mediaType.previews.length)){var p=n.accept.match(/[\w-]+(?=-preview)/g)||[];n.accept=p.concat(e.mediaType.previews).map((function(r){var o=e.mediaType.format?".".concat(e.mediaType.format):"+json";return"application/vnd.github.".concat(r,"-preview").concat(o)})).join(",")}return["GET","HEAD"].includes(s)?t=function(e,r){var o=/\?/.test(e)?"&":"?",s=Object.keys(r);return 0===s.length?e:e+o+s.map((function(e){return"q"===e?"q="+r.q.split("+").map(encodeURIComponent).join("+"):"".concat(e,"=").concat(encodeURIComponent(r[e]))})).join("&")}(t,c):"data"in c?r=c.data:Object.keys(c).length&&(r=c),n["content-type"]||"undefined"===typeof r||(n["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(s)&&"undefined"===typeof r&&(r=""),Object.assign({method:s,url:t,headers:n},"undefined"!==typeof r?{body:r}:null,e.request?{request:e.request}:null)}function U(e,r,o){return F(f(e,r,o))}var C=function e(r,o){var s=f(r,o),t=U.bind(null,s);return Object.assign(t,{DEFAULTS:s,defaults:e.bind(null,s),merge:f.bind(null,s),parse:F})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":"octokit-endpoint.js/".concat("7.0.6"," ").concat(u())},mediaType:{format:"",previews:[]}}),D=o(6434),L=o.n(D),Z=o(47169),j=o(90434),q=function(e){(0,t.Z)(o,e);var r=(0,n.Z)(o);function o(e){var s;return(0,p.Z)(this,o),s=r.call(this,e),Error.captureStackTrace&&Error.captureStackTrace((0,Z.Z)(s),s.constructor),s.name="Deprecation",s}return(0,l.Z)(o)}((0,j.Z)(Error)),x=o(34882),I=o.n(x),W=I()((function(e){return console.warn(e)})),H=I()((function(e){return console.warn(e)})),B=function(e){(0,t.Z)(o,e);var r=(0,n.Z)(o);function o(e,s,t){var n,i;(0,p.Z)(this,o),n=r.call(this,e),Error.captureStackTrace&&Error.captureStackTrace((0,Z.Z)(n),n.constructor),n.name="HttpError",n.status=s,"headers"in t&&"undefined"!==typeof t.headers&&(i=t.headers),"response"in t&&(n.response=t.response,i=t.response.headers);var a=Object.assign({},t.request);return t.request.headers.authorization&&(a.headers=Object.assign({},t.request.headers,{authorization:t.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),a.url=a.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),n.request=a,Object.defineProperty((0,Z.Z)(n),"code",{get:function(){return W(new q("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),s}}),Object.defineProperty((0,Z.Z)(n),"headers",{get:function(){return H(new q("[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.")),i||{}}}),n}return(0,l.Z)(o)}((0,j.Z)(Error));function M(e){return e.arrayBuffer()}function z(e){var r=e.request&&e.request.log?e.request.log:console;(b(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));var o,s,t={};return(e.request&&e.request.fetch||globalThis.fetch||L())(e.url,Object.assign((0,m.Z)({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.body&&{duplex:"half"}),e.request)).then(function(){var n=(0,c.Z)((0,a.Z)().mark((function n(i){var c,p,l,u,d,m;return(0,a.Z)().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:s=i.url,o=i.status,c=(0,g.Z)(i.headers);try{for(c.s();!(p=c.n()).done;)l=p.value,t[l[0]]=l[1]}catch(a){c.e(a)}finally{c.f()}if("deprecation"in t&&(u=t.link&&t.link.match(/<([^>]+)>; rel="deprecation"/),d=u&&u.pop(),r.warn('[@octokit/request] "'.concat(e.method," ").concat(e.url,'" is deprecated. It is scheduled to be removed on ').concat(t.sunset).concat(d?". See ".concat(d):""))),204!==o&&205!==o){n.next=7;break}return n.abrupt("return");case 7:if("HEAD"!==e.method){n.next=11;break}if(!(o<400)){n.next=10;break}return n.abrupt("return");case 10:throw new B(i.statusText,o,{response:{url:s,status:o,headers:t,data:void 0},request:e});case 11:if(304!==o){n.next=24;break}return n.t0=B,n.t1=o,n.t2=s,n.t3=o,n.t4=t,n.next=19,V(i);case 19:throw n.t5=n.sent,n.t6={url:n.t2,status:n.t3,headers:n.t4,data:n.t5},n.t7=e,n.t8={response:n.t6,request:n.t7},new n.t0("Not modified",n.t1,n.t8);case 24:if(!(o>=400)){n.next=30;break}return n.next=27,V(i);case 27:throw m=n.sent,new B(N(m),o,{response:{url:s,status:o,headers:t,data:m},request:e});case 30:return n.abrupt("return",V(i));case 31:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()).then((function(e){return{status:o,url:s,headers:t,data:e}})).catch((function(r){if(r instanceof B)throw r;if("AbortError"===r.name)throw r;throw new B(r.message,500,{request:e})}))}function V(e){return K.apply(this,arguments)}function K(){return(K=(0,c.Z)((0,a.Z)().mark((function e(r){var o;return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=r.headers.get("content-type"),!/application\/json/.test(o)){e.next=3;break}return e.abrupt("return",r.json());case 3:if(o&&!/^text\/|charset=utf-8$/.test(o)){e.next=5;break}return e.abrupt("return",r.text());case 5:return e.abrupt("return",M(r));case 6:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function N(e){return"string"===typeof e?e:"message"in e?Array.isArray(e.errors)?"".concat(e.message,": ").concat(e.errors.map(JSON.stringify).join(", ")):e.message:"Unknown error: ".concat(JSON.stringify(e))}var J=function e(r,o){var s=r.defaults(o);return Object.assign((function(r,o){var t=s.merge(r,o);if(!t.request||!t.request.hook)return z(s.parse(t));var n=function(e,r){return z(s.parse(s.merge(e,r)))};return Object.assign(n,{endpoint:s,defaults:e.bind(null,s)}),t.request.hook(n,t)}),{endpoint:s,defaults:e.bind(null,s)})}(C,{headers:{"user-agent":"octokit-request.js/".concat("6.2.8"," ").concat(u())}});var $=function(e){(0,t.Z)(o,e);var r=(0,n.Z)(o);function o(e,s,t){var n;return(0,p.Z)(this,o),(n=r.call(this,"Request failed due to following response errors:\n"+t.errors.map((function(e){return" - ".concat(e.message)})).join("\n"))).request=e,n.headers=s,n.response=t,n.name="GraphqlResponseError",n.errors=t.errors,n.data=t.data,Error.captureStackTrace&&Error.captureStackTrace((0,Z.Z)(n),n.constructor),n}return(0,l.Z)(o)}((0,j.Z)(Error)),Y=["method","baseUrl","url","headers","request","query","mediaType"],Q=["query","method","url"],X=/\/api\/v3\/?$/;function ee(e,r){var o=e.defaults(r);return Object.assign((function(e,r){return function(e,r,o){if(o){if("string"===typeof r&&"query"in o)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(var s in o)if(Q.includes(s))return Promise.reject(new Error('[@octokit/graphql] "'.concat(s,'" cannot be used as variable name')))}var t="string"===typeof r?Object.assign({query:r},o):r,n=Object.keys(t).reduce((function(e,r){return Y.includes(r)?(e[r]=t[r],e):(e.variables||(e.variables={}),e.variables[r]=t[r],e)}),{}),i=t.baseUrl||e.endpoint.DEFAULTS.baseUrl;return X.test(i)&&(n.url=i.replace(X,"/api/graphql")),e(n).then((function(e){if(e.data.errors){for(var r={},o=0,s=Object.keys(e.headers);o<s.length;o++){var t=s[o];r[t]=e.headers[t]}throw new $(n,r,e.data)}return e.data.data}))}(o,e,r)}),{defaults:ee.bind(null,o),endpoint:o.endpoint})}ee(J,{headers:{"user-agent":"octokit-graphql.js/".concat("5.0.6"," ").concat(u())},method:"POST",url:"/graphql"});var re=/^v1\./,oe=/^ghs_/,se=/^ghu_/;function te(e){return ne.apply(this,arguments)}function ne(){return(ne=(0,c.Z)((0,a.Z)().mark((function e(r){var o,s,t,n;return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=3===r.split(/\./).length,s=re.test(r)||oe.test(r),t=se.test(r),n=o?"app":s?"installation":t?"user-to-server":"oauth",e.abrupt("return",{type:"token",token:r,tokenType:n});case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function ie(e){return 3===e.split(/\./).length?"bearer ".concat(e):"token ".concat(e)}function ae(e,r,o,s){return ce.apply(this,arguments)}function ce(){return ce=(0,c.Z)((0,a.Z)().mark((function e(r,o,s,t){var n;return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(n=o.endpoint.merge(s,t)).headers.authorization=ie(r),e.abrupt("return",o(n));case 3:case"end":return e.stop()}}),e)}))),ce.apply(this,arguments)}var pe=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!==typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(te.bind(null,e),{hook:ae.bind(null,e)})},le=["authStrategy"],ue="4.2.4",de=function(){function e(){var r=this,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,p.Z)(this,e);var s,t=new d.Collection,n={baseUrl:J.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},o.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(n.headers["user-agent"]=[o.userAgent,"octokit-core.js/".concat(ue," ").concat(u())].filter(Boolean).join(" "),o.baseUrl&&(n.baseUrl=o.baseUrl),o.previews&&(n.mediaType.previews=o.previews),o.timeZone&&(n.headers["time-zone"]=o.timeZone),this.request=J.defaults(n),this.graphql=(s=this.request,ee(s,{method:"POST",url:"/graphql"})).defaults(n),this.log=Object.assign({debug:function(){},info:function(){},warn:console.warn.bind(console),error:console.error.bind(console)},o.log),this.hook=t,o.authStrategy){var l=o.authStrategy,g=(0,i.Z)(o,le),m=l(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:g},o.auth));t.wrap("request",m.hook),this.auth=m}else if(o.auth){var T=pe(o.auth);t.wrap("request",T.hook),this.auth=T}else this.auth=(0,c.Z)((0,a.Z)().mark((function e(){return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",{type:"unauthenticated"});case 1:case"end":return e.stop()}}),e)})));this.constructor.plugins.forEach((function(e){Object.assign(r,e(r,o))}))}return(0,l.Z)(e,null,[{key:"defaults",value:function(e){var r=function(r){(0,t.Z)(i,r);var o=(0,n.Z)(i);function i(){var r;(0,p.Z)(this,i);var t=(arguments.length<=0?void 0:arguments[0])||{};return"function"===typeof e?(r=o.call(this,e(t)),(0,s.Z)(r)):o.call(this,Object.assign({},e,t,t.userAgent&&e.userAgent?{userAgent:"".concat(t.userAgent," ").concat(e.userAgent)}:null))}return(0,l.Z)(i)}(this);return r}},{key:"plugin",value:function(){for(var e,r=this.plugins,o=arguments.length,s=new Array(o),i=0;i<o;i++)s[i]=arguments[i];var a=(e=function(e){(0,t.Z)(o,e);var r=(0,n.Z)(o);function o(){return(0,p.Z)(this,o),r.apply(this,arguments)}return(0,l.Z)(o)}(this),e.plugins=r.concat(s.filter((function(e){return!r.includes(e)}))),e);return a}}]),e}();de.VERSION=ue,de.plugins=[];function ge(e){e.hook.wrap("request",(function(r,o){e.log.debug("request",o);var s=Date.now(),t=e.request.endpoint.parse(o),n=t.url.replace(o.baseUrl,"");return r(o).then((function(r){return e.log.info("".concat(t.method," ").concat(n," - ").concat(r.status," in ").concat(Date.now()-s,"ms")),r})).catch((function(r){throw e.log.info("".concat(t.method," ").concat(n," - ").concat(r.status," in ").concat(Date.now()-s,"ms")),r}))}))}ge.VERSION="1.0.4";function me(e){if(!e.data)return(0,m.Z)((0,m.Z)({},e),{},{data:[]});if(!("total_count"in e.data&&!("url"in e.data)))return e;var r=e.data.incomplete_results,o=e.data.repository_selection,s=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;var t=Object.keys(e.data)[0],n=e.data[t];return e.data=n,"undefined"!==typeof r&&(e.data.incomplete_results=r),"undefined"!==typeof o&&(e.data.repository_selection=o),e.data.total_count=s,e}function Te(e,r,o){var s="function"===typeof r?r.endpoint(o):e.request.endpoint(r,o),t="function"===typeof r?r:e.request,n=s.method,i=s.headers,p=s.url;return(0,E.Z)({},Symbol.asyncIterator,(function(){return{next:function(){return(0,c.Z)((0,a.Z)().mark((function e(){var r,o;return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(p){e.next=2;break}return e.abrupt("return",{done:!0});case 2:return e.prev=2,e.next=5,t({method:n,url:p,headers:i});case 5:return r=e.sent,o=me(r),p=((o.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],e.abrupt("return",{value:o});case 11:if(e.prev=11,e.t0=e.catch(2),409===e.t0.status){e.next=15;break}throw e.t0;case 15:return p="",e.abrupt("return",{value:{status:200,headers:{},data:[]}});case 17:case"end":return e.stop()}}),e,null,[[2,11]])})))()}}}))}function Ee(e,r,o,s){return"function"===typeof o&&(s=o,o=void 0),he(e,[],Te(e,r,o)[Symbol.asyncIterator](),s)}function he(e,r,o,s){return o.next().then((function(t){if(t.done)return r;var n=!1;return r=r.concat(s?s(t.value,(function(){n=!0})):t.value.data),n?r:he(e,r,o,s)}))}Object.assign(Ee,{iterator:Te});function be(e){return{paginate:Object.assign(Ee.bind(null,e),{iterator:Te.bind(null,e)})}}be.VERSION="6.1.2";for(var we="7.2.3",_e={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],addSelectedRepoToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repositories/{repository_id}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createRequiredWorkflow:["POST /orgs/{org}/actions/required_workflows"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getEnvironmentPublicKey:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoRequiredWorkflow:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}"],getRepoRequiredWorkflowUsage:["GET /repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repositories/{repository_id}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repositories/{repository_id}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoRequiredWorkflows:["GET /repos/{org}/{repo}/actions/required_workflows"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRequiredWorkflowRuns:["GET /repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs"],listRequiredWorkflows:["GET /orgs/{org}/actions/required_workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelectedRepositoriesRequiredWorkflow:["GET /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],removeSelectedRepoFromRequiredWorkflow:["DELETE /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedReposToRequiredWorkflow:["PUT /orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"],updateRequiredWorkflow:["PATCH /orgs/{org}/actions/required_workflows/{required_workflow_id}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteCodespacesBillingUsers:["DELETE /orgs/{org}/codespaces/billing/selected_users"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setCodespacesBilling:["PUT /orgs/{org}/codespaces/billing"],setCodespacesBillingUsers:["POST /orgs/{org}/codespaces/billing/selected_users"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportStatus:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /organizations/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /organizations/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /organizations/{org}/personal-access-token-requests"],listPatGrants:["GET /organizations/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /organizations/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /organizations/{org}/personal-access-token-requests"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /organizations/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /organizations/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployment"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disableLfsForRepo:["DELETE /repos/{owner}/{repo}/lfs"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enableLfsForRepo:["PUT /repos/{owner}/{repo}/lfs"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},fe=new Map,ve=0,ke=Object.entries(_e);ve<ke.length;ve++)for(var Ge=(0,T.Z)(ke[ve],2),ye=Ge[0],Pe=Ge[1],Se=0,Ae=Object.entries(Pe);Se<Ae.length;Se++){var Re=(0,T.Z)(Ae[Se],2),Oe=Re[0],Fe=Re[1],Ue=(0,T.Z)(Fe,3),Ce=Ue[0],De=Ue[1],Le=Ue[2],Ze=Ce.split(/ /),je=(0,T.Z)(Ze,2),qe=je[0],xe=je[1],Ie=Object.assign({method:qe,url:xe},De);fe.has(ye)||fe.set(ye,new Map),fe.get(ye).set(Oe,{scope:ye,methodName:Oe,endpointDefaults:Ie,decorations:Le})}var We={get:function(e,r){var o=e.octokit,s=e.scope,t=e.cache;if(t[r])return t[r];var n=fe.get(s).get(r),i=n.decorations,a=n.endpointDefaults;return t[r]=i?function(e,r,o,s,t){var n=e.request.defaults(s);function i(){var s,i=(s=n.endpoint).merge.apply(s,arguments);if(t.mapToData)return i=Object.assign({},i,(0,E.Z)({data:i[t.mapToData]},t.mapToData,void 0)),n(i);if(t.renamed){var a=(0,T.Z)(t.renamed,2),c=a[0],p=a[1];e.log.warn("octokit.".concat(r,".").concat(o,"() has been renamed to octokit.").concat(c,".").concat(p,"()"))}if(t.deprecated&&e.log.warn(t.deprecated),t.renamedParameters){for(var l,u=(l=n.endpoint).merge.apply(l,arguments),d=0,g=Object.entries(t.renamedParameters);d<g.length;d++){var m=(0,T.Z)(g[d],2),h=m[0],b=m[1];h in u&&(e.log.warn('"'.concat(h,'" parameter is deprecated for "octokit.').concat(r,".").concat(o,'()". Use "').concat(b,'" instead')),b in u||(u[b]=u[h]),delete u[h])}return n(u)}return n.apply(void 0,arguments)}return Object.assign(i,n)}(o,s,r,a,i):o.request.defaults(a),t[r]}};function He(e){var r,o={},s=(0,g.Z)(fe.keys());try{for(s.s();!(r=s.n()).done;){var t=r.value;o[t]=new Proxy({octokit:e,scope:t,cache:{}},We)}}catch(n){s.e(n)}finally{s.f()}return o}function Be(e){var r=He(e);return(0,m.Z)((0,m.Z)({},r),{},{rest:r})}Be.VERSION=we;var Me=de.plugin(ge,Be,be).defaults({userAgent:"octokit-rest.js/".concat("19.0.13")})},72252:function(e,r,o){var s=o(47625),t=o(15911),n=o(11203),i=Function.bind,a=i.bind(i);function c(e,r,o){var s=a(n,null).apply(null,o?[r,o]:[r]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach((function(s){var n=o?[r,s,o]:[r,s];e[s]=e.api[s]=a(t,null).apply(null,n)}))}function p(){var e={registry:{}},r=s.bind(null,e);return c(r,e),r}var l=!1;function u(){return l||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),l=!0),p()}u.Singular=function(){var e={registry:{}},r=s.bind(null,e,"h");return c(r,e,"h"),r}.bind(),u.Collection=p.bind(),e.exports=u,e.exports.Hook=u,e.exports.Singular=u.Singular,e.exports.Collection=u.Collection},15911:function(e){e.exports=function(e,r,o,s){var t=s;e.registry[o]||(e.registry[o]=[]);"before"===r&&(s=function(e,r){return Promise.resolve().then(t.bind(null,r)).then(e.bind(null,r))});"after"===r&&(s=function(e,r){var o;return Promise.resolve().then(e.bind(null,r)).then((function(e){return t(o=e,r)})).then((function(){return o}))});"error"===r&&(s=function(e,r){return Promise.resolve().then(e.bind(null,r)).catch((function(e){return t(e,r)}))});e.registry[o].push({hook:s,orig:t})}},47625:function(e){e.exports=function e(r,o,s,t){if("function"!==typeof s)throw new Error("method for before hook must be a function");t||(t={});if(Array.isArray(o))return o.reverse().reduce((function(o,s){return e.bind(null,r,s,o,t)}),s)();return Promise.resolve().then((function(){return r.registry[o]?r.registry[o].reduce((function(e,r){return r.hook.bind(null,e,t)}),s)():s(t)}))}},11203:function(e){e.exports=function(e,r,o){if(!e.registry[r])return;var s=e.registry[r].map((function(e){return e.orig})).indexOf(o);if(-1===s)return;e.registry[r].splice(s,1)}},6434:function(e,r,o){"use strict";var s=function(){if("undefined"!==typeof self)return self;if("undefined"!==typeof window)return window;if("undefined"!==typeof o.g)return o.g;throw new Error("unable to locate global object")}();e.exports=r=s.fetch,s.fetch&&(r.default=s.fetch.bind(s)),r.Headers=s.Headers,r.Request=s.Request,r.Response=s.Response},34882:function(e,r,o){var s=o(57264);function t(e){var r=function r(){return r.called?r.value:(r.called=!0,r.value=e.apply(this,arguments))};return r.called=!1,r}function n(e){var r=function r(){if(r.called)throw new Error(r.onceError);return r.called=!0,r.value=e.apply(this,arguments)},o=e.name||"Function wrapped with `once`";return r.onceError=o+" shouldn't be called more than once",r.called=!1,r}e.exports=s(t),e.exports.strict=s(n),t.proto=t((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return t(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return n(this)},configurable:!0})}))},57264:function(e){e.exports=function e(r,o){if(r&&o)return e(r)(o);if("function"!==typeof r)throw new TypeError("need wrapper function");return Object.keys(r).forEach((function(e){s[e]=r[e]})),s;function s(){for(var e=new Array(arguments.length),o=0;o<e.length;o++)e[o]=arguments[o];var s=r.apply(this,e),t=e[e.length-1];return"function"===typeof s&&s!==t&&Object.keys(t).forEach((function(e){s[e]=t[e]})),s}}}}]);
//# sourceMappingURL=3802.b37d2900.chunk.js.map